<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Code Eat Code Blog</title>
        <link>https://codeeatcode.github.io/</link>
        <description>Code Eat Code Blog</description>
        <lastBuildDate>Thu, 16 Sep 2021 11:56:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Establishing A Walking Skeleton For Projects]]></title>
            <link>https://codeeatcode.github.io/establishing-a-walking-skeleton-for-projects</link>
            <guid>establishing-a-walking-skeleton-for-projects</guid>
            <pubDate>Thu, 16 Sep 2021 11:56:19 GMT</pubDate>
            <description><![CDATA[I've been reading the excellent book Growing Object-Oriented Software, Guided By Tests and there's so much that resonated with me about starting work on a new project.]]></description>
            <content:encoded><![CDATA[<p>I've been reading the excellent book <a href="https://www.goodreads.com/en/book/show/4268826-growing-object-oriented-software-guided-by-tests" target="_blank" rel="noopener noreferrer" title="Growing Object-Oriented Software, Guided By Tests">Growing Object-Oriented Software, Guided By Tests</a> and there's so much that resonated with me about starting work on a new project.</p><p>As with anything new, give developers some shiny new something to work on and there's always the temptation to dive right in and get started with code. This often means that you're starting from the inside-out of a problem space and often some operational details are overlooked. When we're done solving that problem, trying to release that or to push that to production is often a problem nobody had perceived.</p><p>I recently experienced this on a project where we'd resorted to creating the application locally to put that online later. We had an idea of things like tech limitations and choices at the time, and deferring that decision seemed right, but it later came to bite us when we wanted to release the first feature.</p><p>We had roadblocks after one another, these came in the form of security policies, technology choices and release process already in place and trying something new. This whole thing cost us a couple of months of back and forth between dev/ops/admin folks.</p><p>So if I could tell my past self, I would say, release early and release often even if it means releasing the project skeleton in a hello world state.</p><p>In the context of the book I've been reading, establishing a walking skeleton is hugely important.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Journey To The Centre Of The Stack]]></title>
            <link>https://codeeatcode.github.io/journey-to-the-centre-of-the-stack</link>
            <guid>journey-to-the-centre-of-the-stack</guid>
            <pubDate>Mon, 30 Nov 2020 11:00:00 GMT</pubDate>
            <description><![CDATA[Journey to the Centre of the stack - Dockerising the legacy]]></description>
            <content:encoded><![CDATA[<h4 class="anchor anchorWithStickyNavbar_mojV" id="dockerising-the-legacy">Dockerising the legacy<a class="hash-link" href="#dockerising-the-legacy" title="Direct link to heading">​</a></h4><p>Making changes to application infrastructure can be daunting at the best of times so when it was decided that we move to the world of containers, I took on a task I didn’t know the depth of, so I am going to share my experience of getting my hands dirty.</p><p>At the time, I was new to docker but very interested in the technology, as technology folks, we all love a shiny new toy to play with. Apart from that the advantages and thus the reasons for so are listed as follows in no particular order:</p><ul><li>Introducing speedier changes and testing ideas faster</li><li>Infrastructure as code</li><li>Simplify application/tech stack</li><li>Be cloud-friendly</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="legacy-stack">Legacy Stack<a class="hash-link" href="#legacy-stack" title="Direct link to heading">​</a></h2><p>Where working with the difficulty of releasing changes in the current environment that are potentially outdated, have no tests and no real dependency management, installing the dependencies and developing newer features can be a considerable effort.</p><p>The monster you could be working with may consist of the spaghetti of many applications running outdated technology.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="doing-the-dirty-work">Doing the dirty work<a class="hash-link" href="#doing-the-dirty-work" title="Direct link to heading">​</a></h2><p>I would, of course, start with looking at the stack diagram of sorts or create one if there’s isn’t one already and identify common things between the applications. If you have more than one application that shares a lot of common things such as language, set of libraries, webserver and OS, then extract this to a base image that each application can build on and extend.</p><p>For example, what tripped me when I tested one of the apps where file upload functionality failed because the file size was larger than the one allowed. So take care to look through configs of environments &amp; language etc.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="environment-variables">Environment Variables<a class="hash-link" href="#environment-variables" title="Direct link to heading">​</a></h2><p>These will be your friend when dockerising an application so I would identify various things such as follows</p><ul><li>File storage paths e.g. for static assets</li><li>URLs</li><li>Secrets</li></ul><p>Furthermore, environment variables helped me greatly in maintaining compatibility via feature flags as I wanted to maintain compatibility between the current environment and the potential new docker environment.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="file-paths">File paths<a class="hash-link" href="#file-paths" title="Direct link to heading">​</a></h2><p>Extract these paths across the applications and move to constants or move them to environment variables. So if you have a path dependency on e.g. <strong><em>/tmp</em></strong> this could be moved to an environment variable named <strong>TMP_PATH,</strong> making it configurable which can be supplied when the container is run.</p><p>In reality, you’ll likely be running multiple instances of the same container so changing this in favour of persistent storage via Kubernetes or Docker volumes would be better to allow access to any stored files to any multiple running instances. If you have the option, move files to S3 buckets or similar e.g. Min.io.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="extract-secrets">Extract secrets<a class="hash-link" href="#extract-secrets" title="Direct link to heading">​</a></h2><p>Extract any secrets e.g. API Keys to Docker/Kubernetes secrets, these could be stored in your favourite secrets management solution. Although initially, you may not have an established secrets management solution, so moving these to environment variables temporarily would allow you to get on with the job at hand.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="logging-mechanism">Logging mechanism<a class="hash-link" href="#logging-mechanism" title="Direct link to heading">​</a></h2><p>If you’re dockerising a legacy application then you’ll likely more than one process doing some important work e.g. Apache/Nginx logs, application logs, cron logs. These may also be writing to multiple different log files.</p><p>In suggested practice, it’s best to write to the standard output stream to see a combined view although you’ll want to differentiate between logs of different kinds. This can be done with a centralised logging solution for later.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="language-versions">Language versions<a class="hash-link" href="#language-versions" title="Direct link to heading">​</a></h2><p>This applies to any language but picking a ready-built official Docker image will go a long way to simplifying your life. Failing that, if nothing is available then look to build the language from the source on the closest os version. It should minimise any compatibility differences.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="web-server">Web Server<a class="hash-link" href="#web-server" title="Direct link to heading">​</a></h2><p>Keep to the same web server and the same version where possible.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="session-storage-paths">Session storage paths<a class="hash-link" href="#session-storage-paths" title="Direct link to heading">​</a></h2><p>Try to opt for a unified storage for sessions for example Database backed sessions otherwise try to go for a unified file path using persistent storage mounts.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="access-to-other-web-services">Access to other web services<a class="hash-link" href="#access-to-other-web-services" title="Direct link to heading">​</a></h2><p>Be mindful of how your application talks to another in your network. Whether this is via DNS or by hardcoded IP, you’ll want to change this to access this service by service name. The address should be extracted to an environment variable also to allow for configuration.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="how-to-test-changes-as-you-refactor">How to test changes as you refactor?<a class="hash-link" href="#how-to-test-changes-as-you-refactor" title="Direct link to heading">​</a></h2><p>If you’re lucky enough to have various types of tests for your application then keep running tests every so often while you make changes. Either run these locally or if you have a CI server setup to build your image and test on every push then that’s great.</p><p>Failing that, test the area/feature you’re refactoring by running the application with some dummy data.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="reverse-proxying">Reverse Proxying<a class="hash-link" href="#reverse-proxying" title="Direct link to heading">​</a></h2><p>Use a reverse proxy such as Nginx/HA Proxy/Traefik to act as an ingress controller for requests.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ssl-termination">SSL Termination<a class="hash-link" href="#ssl-termination" title="Direct link to heading">​</a></h2><p>Important to figure this one when you consider yourself done with Dockerisation, as this may not be your biggest problem initially where you run one container in isolation.</p><p>One gotcha with this will be when, say, you go to production where your ingress is using a reverse proxy or a load balancer then if your application sets secure cookies, they may not be transmitted to the browser to be stored if you’re not using SSL with your app.</p><p><img loading="lazy" src="https://www.nginx.com/wp-content/uploads/2014/04/nginx-decrypts-https-traffic.png" alt="SSL Termination Nginx" class="img_E7b_"></p><p>Shamelessly borrowed from <a href="https://www.nginx.com/blog/nginx-ssl/" target="_blank" rel="noopener noreferrer">https://www.nginx.com/blog/nginx-ssl/</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="cronjobs">Cronjobs<a class="hash-link" href="#cronjobs" title="Direct link to heading">​</a></h2><p>If you plan on using Kubernetes then it allows you to schedule workloads that can be scheduled using a cronjob like syntax. Please see more details here: <a href="https://www.nginx.com/blog/nginx-ssl/" target="_blank" rel="noopener noreferrer">https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="file-permissions">File permissions<a class="hash-link" href="#file-permissions" title="Direct link to heading">​</a></h2><p>Container’s file permissions get copied from the host machine’s file system while building images so be mindful when building them on environments implementing the least privilege principle on the filesystem.</p><p>So when you COPY or ADD files, you can use the following</p><div class="codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-text codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>I may have glossed over a few things but I would like to say that no matter how much I share, your own journey will give you a great bit of experience and hope I’ve shared some gotchas that may be of some help. So dive right in but with some consideration :-)</p><p>Thanks for sticking with me.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JSON Web Tokens]]></title>
            <link>https://codeeatcode.github.io/JSON-WEB-TOKEN</link>
            <guid>JSON-WEB-TOKEN</guid>
            <pubDate>Tue, 28 Feb 2017 11:45:44 GMT</pubDate>
            <description><![CDATA[Repost from https://medium.com/@ambersariya/jwt-json-web-token-cd90ef7a7a66]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="what-is-it">What is it?<a class="hash-link" href="#what-is-it" title="Direct link to heading">​</a></h2><blockquote><p><em>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</em></p></blockquote><p>JSON Web Tokens are an open, industry-standard <a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener noreferrer"><strong>RFC 7519</strong></a> method for representing claims securely between two parties. See here: <a href="https://jwt.io" target="_blank" rel="noopener noreferrer" title="https://jwt.io">https://jwt.io</a></p><p>In this context, "claim" can be something like a "command", a one-time authorization, or basically any other scenario that you can word as:</p><blockquote><p><em>Hello Server B, Server A told me that I could "<strong>claim goes here</strong>", and here’s the (cryptographic) proof.</em></p></blockquote><p>Before we dive into this further, I’d like to define some terms we use in the realm of authentication.</p><blockquote><p><strong><em>Authentication</em></strong> <em>— Proving who you are</em></p><p><strong><em>Authorization</em></strong> <em>— Being granted access to resources</em></p><p><strong><em>Token</em></strong> <em>— medium used to persist authentication and get authorization</em></p></blockquote><h2 class="anchor anchorWithStickyNavbar_mojV" id="so-what-does-it-look-like">So, what does It Look Like?<a class="hash-link" href="#so-what-does-it-look-like" title="Direct link to heading">​</a></h2><p>Well, it looks like another confusing looking string</p><div class="codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-text codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Upon closer inspections, you’ll see that this JWT consist of three parts separated by dots (<code>.</code>), which are:</p><ul><li><p>Header</p></li><li><p>Payload</p></li><li><p>Signature</p><p>  Header.Payload.Signature</p></li></ul><p>So, let’s break it down a little:</p><div class="language-js codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-js codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// header</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// payload</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="header">Header<a class="hash-link" href="#header" title="Direct link to heading">​</a></h3><div class="language-json codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_YYkX">HS256 indicates that this token is signed using HMAC-SHA256.</div><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-json codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"alg"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"HS256"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"typ"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"JWT"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="claimspayload">Claims/Payload<a class="hash-link" href="#claimspayload" title="Direct link to heading">​</a></h3><div class="language-json codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_YYkX">The payload contains the claims that we wish to make</div><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-json codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"sub"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1234567890"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"John Doe"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token property" style="color:#36acaa">"admin"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="signature">Signature<a class="hash-link" href="#signature" title="Direct link to heading">​</a></h3><p>We use the following formula to calcalate signature</p><div class="language-js codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-js codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token constant" style="color:#36acaa">HMACSHA256</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">encodeBase64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">header</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"."</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">encodeBase64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> secret</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This then gives us something like:</p><div class="codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-text codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain">thiseyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let’s expand on the claims section of JWT. The following claims are part of the RFC document:</p><p><strong>iss</strong>: who is the issuer of this token auth.example.com
<strong>sub</strong>: what is the subject of this token e.g. auth
<strong>aud</strong>: who can use this token e.g <!-- -->['client1.example.com','client2.example.com']<!-- -->
<strong>exp</strong>: Defines the expiration time as unix timestamp e.g. 1488192525
<strong>nbf</strong>: define how long after the issued token was generated we can use it e.g. 300 seconds (5 minutes)
<strong>iat</strong>: issued at is a unix timestamp e.g. 1488192525
<strong>jti</strong>: JWT ID unique id. This can be used to prevent a token from being replayed e.g. "xa443D"</p><p>The key names are case sensitive and have been kept small to keep the JSON payload compact.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="how-does-the-authentication-flow-work">How does the Authentication Flow work?<a class="hash-link" href="#how-does-the-authentication-flow-work" title="Direct link to heading">​</a></h2><p>In authentication, when the user successfully logs in using their credentials, a JSON Web Token will be returned and must be saved locally (typically in local storage, but cookies can be also used), instead of the traditional approach of creating a session in the server and returning a cookie.</p><div class="language-json codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_YYkX">POST /login</div><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-json codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"username@example-domain.com"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"5£cUr3PA$$W0rd!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-json codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_YYkX">Response 201 Created</div><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-json codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Any subsequent calls to the API would typically send the Authorization header using the Bearer schema.</p><div class="language-js codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-js codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token literal-property property" style="color:#36acaa">Authorization</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Bearer myToken"</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Therefore the content of the header should look like the following.</p><div class="language-js codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_YYkX">GET /</div><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-js codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain"># </span><span class="token maybe-class-name">Headers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">Authorization</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is a stateless authentication mechanism as the user state is never saved in the server memory. The server’s protected routes will check for a valid JWT in the Authorization header, and if there is, the user will be allowed.</p><ul><li>signature valid?</li><li>client allowed? aud- expected issuer? iss- can this token be used? nbf</li></ul><p>As JWTs are self-contained, all the necessary information is there, reducing the need of going back and forward to the database. This allows us to fully rely on data APIs that are stateless and even make requests to downstream services. It doesn’t matter which domains are serving the APIs, as Cross-Origin Resource Sharing (CORS) won’t be an issue as it doesn’t use cookies.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="making-a-case-for-jwt">Making a case for JWT<a class="hash-link" href="#making-a-case-for-jwt" title="Direct link to heading">​</a></h2><ul><li><strong>Portability</strong>: they work across many different platforms, having implementations in various programming languages.</li><li><strong>Compact</strong>: Because of its size, it can be sent through an URL, POST parameter, or inside an HTTP header. Additionally, due to its size its transmission is fast.</li><li><strong>Self-contained:</strong> The payload contains all the required information about the user, to avoid querying the database more than once.</li><li><strong>Control:</strong> Allows fine grained control over types of permissions. You can specify detailed access control information within <em>the token itself</em> as part of its payload. For instance, in the same way that you can create AWS security policies with very specific permissions, you can limit the token to only give read/write access to a single resource. In contrast, API Keys tend to have a coarse all-or-nothing access.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="problems-with-jwt">Problems with JWT<a class="hash-link" href="#problems-with-jwt" title="Direct link to heading">​</a></h2><ul><li>Cannot be used in place of Sessions &amp; Cookies. If we want to use them in such a manner, then stick with Sessions and Cookies.</li><li>Data goes stale. For instance, an admin with a JWT token has had their access revoked but the token will keep on working because it was generated and verified correctly with the secret key.</li><li>There’s a critical vulnerability when using Asymmetric keys. The attackers know which algorithm was used to generate the token. This is open to abuse from the attackers. The server should already know which algorithm was used to generate/verify the integrity of this token.</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>JSON Web Tokens offer many advantages but not without having some drawbacks. If you work on an extremely large-scale application, sessions could be the appropriate choice. It is completely reasonable to combine sessions and JWT — they each have their own purpose, and sometimes you need both. Just don’t use JWT for <em>persistent</em> data.</p><hr><h2 class="anchor anchorWithStickyNavbar_mojV" id="further-reading">Further Reading<a class="hash-link" href="#further-reading" title="Direct link to heading">​</a></h2><p>Thanks to the following:</p><ul><li><a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener noreferrer" title="https://tools.ietf.org/html/rfc7519">https://tools.ietf.org/html/rfc7519</a></li><li><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName" target="_blank" rel="noopener noreferrer" title="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName">http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#RegisteredClaimName</a></li><li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/" target="_blank" rel="noopener noreferrer" title="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/">https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/</a></li><li><a href="https://auth0.com/learn/json-web-tokens/" target="_blank" rel="noopener noreferrer" title="https://auth0.com/learn/json-web-tokens/">https://auth0.com/learn/json-web-tokens/</a></li><li><a href="https://www.slideshare.net/lcobucci/jwt-to-authentication-and-beyond" target="_blank" rel="noopener noreferrer" title="https://www.slideshare.net/lcobucci/jwt-to-authentication-and-beyond">https://www.slideshare.net/lcobucci/jwt-to-authentication-and-beyond</a></li><li><a href="https://www.slideshare.net/a_z_e_t/javascript-object-signing-encryption" target="_blank" rel="noopener noreferrer" title="https://www.slideshare.net/a_z_e_t/javascript-object-signing-encryption">https://www.slideshare.net/a_z_e_t/javascript-object-signing-encryption</a></li><li><a href="http://christhorntonsf.com/secure-your-apis-with-jwt/" target="_blank" rel="noopener noreferrer" title="http://christhorntonsf.com/secure-your-apis-with-jwt/">http://christhorntonsf.com/secure-your-apis-with-jwt/</a></li><li><a href="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/" target="_blank" rel="noopener noreferrer" title="http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/">http://cryto.net/<!-- -->~<!-- -->joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blogging Like a Hacker]]></title>
            <link>https://codeeatcode.github.io/blogging-like-a-hacker</link>
            <guid>blogging-like-a-hacker</guid>
            <pubDate>Sun, 29 Jan 2017 02:01:12 GMT</pubDate>
            <description><![CDATA[First post]]></description>
            <content:encoded><![CDATA[<p>Hello World 🌏</p><p>This is my first post, hoping there's a lot more I can write, but for now, this is me getting started with blogging.</p><p>I am an experienced Software Developer from the UK. I started my first fulltime job in 2011, I never thought to share my thoughts &amp; experience. Through this blog, I am hoping to channel my thoughts and hopefully pay forward the knowledge in the same way I've found to be useful from other bloggers.</p><p>For now, I have a lot to learn about GitHub pages but I shall be adding more content over the coming future.</p><p>Stay tuned. ⚠️ 🚧</p>]]></content:encoded>
        </item>
    </channel>
</rss>